#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
gh_gabum_usage() {
  if [[ -n $long_usage ]]; then
    printf "gh-gabum - An extension to generate new projects as fast as a rocket ðŸš€ !\n"
    echo 
  else
    printf "gh-gabum - An extension to generate new projects as fast as a rocket ðŸš€ !\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  gh-gabum [command]\n"
  printf "  gh-gabum [command] --help | -h\n"
  printf "  gh-gabum --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  verify   Verify the gabum settings"
  echo "  create   Create a new project"
  echo "  open     Open a project"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  GABUM_HOME (required)"
    printf "    Set the gabum home directory\n"
    echo

  fi
}

# :command.usage
gh_gabum_verify_usage() {
  if [[ -n $long_usage ]]; then
    printf "gh-gabum verify - Verify the gabum settings\n"
    echo 
  else
    printf "gh-gabum verify - Verify the gabum settings\n"
    echo 
  fi

  printf "Shortcut: v\n"
  echo

  printf "Usage:\n"
  printf "  gh-gabum verify\n"
  printf "  gh-gabum verify --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  gh gabum verify\n"
    echo

  fi
}

# :command.usage
gh_gabum_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "gh-gabum create - Create a new project\n"
    echo 
  else
    printf "gh-gabum create - Create a new project\n"
    echo 
  fi

  printf "Shortcut: c\n"
  echo

  printf "Usage:\n"
  printf "  gh-gabum create NAME\n"
  printf "  gh-gabum create --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  NAME"
    printf "    The name of the new project\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  gh gabum create example-project\n"
    echo

  fi
}

# :command.usage
gh_gabum_open_usage() {
  if [[ -n $long_usage ]]; then
    printf "gh-gabum open - Open a project\n"
    echo 
  else
    printf "gh-gabum open - Open a project\n"
    echo 
  fi

  printf "Shortcut: o\n"
  echo

  printf "Usage:\n"
  printf "  gh-gabum open NAME\n"
  printf "  gh-gabum open --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  NAME"
    printf "    The name of the project\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  gh gabum open example-project\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
gh_gabum_verify_command() {
  # :src/verify_command.sh
  echo "GABUM_HOME = \"$GABUM_HOME\""
  echo "GABUM_DIRECTORY = \"$GABUM_DIRECTORY\""
}

# :command.function
gh_gabum_create_command() {
  # :src/create_command.sh
  PROJECT_PATH="${GABUM_DIRECTORY}/${args[name]}"
  
  git init "${PROJECT_PATH}"
  cd "${PROJECT_PATH}"
  
  gh repo create
  
  code -n "${PROJECT_PATH}"
}

# :command.function
gh_gabum_open_command() {
  # :src/open_command.sh
  PROJECT_PATH="${GABUM_DIRECTORY}/${args[name]}"
  
  code -n "${PROJECT_PATH}"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gh_gabum_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  if [[ -z "$GABUM_HOME" ]]; then
    printf "missing required environment variable: GABUM_HOME\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  verify | v )
    action="verify"
    shift
    gh_gabum_verify_parse_requirements "$@"
    shift $#
    ;;    
  
  create | c )
    action="create"
    shift
    gh_gabum_create_parse_requirements "$@"
    shift $#
    ;;    
  
  open | o )
    action="open"
    shift
    gh_gabum_open_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    gh_gabum_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
gh_gabum_verify_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gh_gabum_verify_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="verify"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
gh_gabum_create_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gh_gabum_create_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="create"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[name]=$1
    shift
  else
    printf "missing required argument: NAME\nusage: gh-gabum create NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[name]} ]]; then
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
gh_gabum_open_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gh_gabum_open_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="open"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[name]=$1
    shift
  else
    printf "missing required argument: NAME\nusage: gh-gabum open NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[name]} ]]; then
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.2.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  if [[ -z "${GABUM_HOME}" ]]; then
    GABUM_HOME="${HOME}/.gabum"
  else
    GABUM_HOME="${GABUM_HOME}"
  fi
  
  if [[ ! -f "${GABUM_HOME}" ]]
  then
      mkdir -p "${GABUM_HOME}"
  fi
  
  if [[ -z "${GABUM_DIRECTORY}" ]]; then
    GABUM_DIRECTORY="${HOME}/Documents/Development"
  else
    GABUM_DIRECTORY="${GABUM_DIRECTORY}"
  fi
  
  if [[ ! -f "${GABUM_DIRECTORY}" ]]
  then
      mkdir -p "${GABUM_DIRECTORY}"
  fi
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  declare -a input
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "verify" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      gh_gabum_verify_usage
    else
      gh_gabum_verify_command
    fi
  
  elif [[ $action == "create" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      gh_gabum_create_usage
    else
      gh_gabum_create_command
    fi
  
  elif [[ $action == "open" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      gh_gabum_open_usage
    else
      gh_gabum_open_command
    fi
  
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
